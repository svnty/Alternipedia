generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// =======================
// User + Auth Models
// =======================
enum UserRole {
  USER
  ADMIN
}

enum SubscriptionTier {
  FREE
  PRO
}

model User {
  id              String            @id @default(cuid())
  name            String?
  email           String?           @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  role            UserRole          @default(USER)

  blocks          Block[]
  addedCategories ArticleCategory[] // categories this user added
  watching        ArticleWatcher[]  // articles this user watches
  savedArticles   SavedArticle[] // articles this user saved
  moderatedBias   ModeratorBias? // Bias this user moderates (one bias)
  biasBans        BiasBan[]         // üö´ bans received
  issuedBans      BiasBan[]         @relation("BiasBanModerator") // üßë‚Äç‚öñÔ∏è bans given (mods)
  votes           RevisionVote[]
  notes           Note[]
  uploadedBlobs   UploadedBlobs[]
  feedbacks       Feedback[]

  currentEditableBias   Bias?    @relation(fields: [currentEditableBiasId], references: [id])
  currentEditableBiasId Int?
  currentEditableBiasChangedAt DateTime?

  subscriptionTier      SubscriptionTier @default(FREE)
  subscriptionStartedAt DateTime?
  subscriptionHistory   Subscription[]
  subscriptionExpiresAt DateTime?
  stripeCustomerId      String?

  emailNotifications    Boolean          @default(true)
  pushNotifications     Boolean          @default(true)

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model ModeratorBias {
  id        Int      @id @default(autoincrement())
  
  user      User     @relation(fields: [userId], references: [id])
  userId    String  @unique

  bias      Bias     @relation(fields: [biasId], references: [id])
  biasId    Int

  assignedAt DateTime @default(now())
}

model Subscription {
  id           String   @id @default(cuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String

  stripeSubId  String   @unique
  plan         SubscriptionTier

  status       String
  currentPeriodEnd DateTime
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// =======================
// Core Wiki Models
// =======================
model Bias {
  id              Int        @id @default(autoincrement())
  name            String     @unique
  revisions       Revision[]
  bans            BiasBan[]
  moderators      ModeratorBias[]
  editableByUsers User[]
  uploadedBlobs    UploadedBlobs[]

  ArticleCategory ArticleCategory[]
}

// TODO: Warning strikes?
model BiasBan {
  id           Int       @id @default(autoincrement())
  user         User      @relation(fields: [userEmail], references: [email])
  userEmail    String 
  bias         Bias      @relation(fields: [biasId], references: [id])
  biasId       Int
  bannedBy     User?     @relation("BiasBanModerator", fields: [bannedByUserId], references: [id])
  bannedByUserId String?
  reason       String?
  createdAt    DateTime  @default(now())
  expiresAt    DateTime?

  @@unique([userEmail, biasId]) // prevent duplicate bans per bias
}

model Feedback {
  id        Int      @id @default(autoincrement())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?

  content   String @db.VarChar(1000)
  createdAt DateTime @default(now())
}

model Article {
  id          Int               @id @default(autoincrement())
  title       String
  slug        String
  revisions   Revision[]
  categories  ArticleCategory[] // explicit join model with metadata
  watchers    ArticleWatcher[]   // who‚Äôs watching this article
  savedBy     SavedArticle[] // who's saved this article
  language    Language
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  @@unique([slug, language])
  @@unique([title, language])
}

model Revision {
  id              Int      @id @default(autoincrement())
  article         Article  @relation(fields: [articleId], references: [id])
  articleId       Int

  bias            Bias     @relation(fields: [biasId], references: [id])
  biasId          Int

  revisionBlocks  RevisionBlock[] 
  votes           RevisionVote[]

  createdAt       DateTime @default(now())
}

model Block {
  id       Int      @id @default(autoincrement())
  author   User?    @relation(fields: [authorId], references: [id])
  authorId String?

  type     BlockType
  content  Json

  revisionBlocks RevisionBlock[]
}

model Note {
  id       Int      @id @default(autoincrement())
  author   User?    @relation(fields: [authorId], references: [id])
  authorId String?

  content  Json
}

model RevisionBlock {
  id         Int      @id @default(autoincrement())
  revision   Revision @relation(fields: [revisionId], references: [id])
  revisionId Int
  block      Block    @relation(fields: [blockId], references: [id])
  blockId    Int

  order      Int      
}

model RevisionVote {
  id         Int       @id @default(autoincrement())
  revision   Revision  @relation(fields: [revisionId], references: [id])
  revisionId Int

  user       User      @relation(fields: [userId], references: [id])
  userId     String

  value      Int       @default(1) // 1 star, could extend to multi-star rating
  createdAt  DateTime  @default(now())

  @@unique([revisionId, userId]) // each user can vote once per revision
}

model UploadedBlobs {
  id        Int      @id @default(autoincrement())
  url       String   @unique

  bias      Bias      @relation(fields: [biasId], references: [id])
  biasId    Int

  tier     SubscriptionTier @default(FREE)

  uploadedBy User    @relation(fields: [uploadedByUserId], references: [id])
  uploadedByUserId String

  uploadedAt DateTime @default(now())
}

enum BlockType {
  PARAGRAPH
  HEADING
  QUOTE
  BULLET_LIST_ITEM
  NUMBERED_LIST_ITEM
  CODE_BLOCK
  TABLE
  IMAGE
  VIDEO
  AUDIO
}

enum Language {
  EN // English
  ZH // Chinese (Mandarin)
  HI // Hindi
  ES // Spanish 
  FR // French
  AR // Arabic
  BN // Bengali
  PT // Portguese
  RU // Russian
  UR // Urdu
  ID // Indonesian
  DE // German
  JA // Japanese
  MR // Marathi
  TE // Telugu
  TR // Turkish
  TA // Tamil (Sri Lankan)
  YUE // Cantonese
  VI // Vietnamese
  FIL // Filipino
  KO // Korean
  HA // Hausa
  ARZ // Egyptian Arabic
  JV // Javanese
  IT // Italian
  NL // Dutch
  EL // Greek
  SV // Swedish
  NO // Norwegian
  PL // Polish
  TH // Thai
  UK // Ukranian
  RO // Romanian
  CS // Czech
  HU // Hungarian
  FI // Finnish
  DA // Danish
  BG // Bulgarian
  SK // Slovak
  HR // Croatian
  LT // Lithuanian
  SL // Slovenain
  LV // Latvian 
  ET // Estonian
  IS // Icelandic
  SQ // Albanian
  SR // Serbian
  MK // Macedonian
  BS // Bosnian
  CNR //Montenegrin
  MT // Maltese
}

model Category {
  id        Int               @id @default(autoincrement())
  name      String
  articles  ArticleCategory[]
  language Language           @default(EN) // categories are language-specific
  @@unique([name, language])
}

model ArticleCategory {
  article       Article @relation(fields: [articleId], references: [id])
  articleId     Int

  category      Category @relation(fields: [categoryId], references: [id])
  categoryId    Int

  biasId        Int
  bias          Bias  @relation(fields: [biasId], references: [id])

  addedBy       User     @relation(fields: [addedByUserId], references: [id])
  addedByUserId String   // ‚úÖ matches User.id

  addedAt       DateTime @default(now())

  @@id([articleId, categoryId, biasId]) // composite primary key includes bias so categories can vary per-bias
}

// ===================
// WATCHERS & SAVERS
// ===================
model ArticleWatcher {
  id        String   @id @default(cuid())

  article     Article? @relation(fields: [articleId], references: [id])
  articleId   Int?

  user        User    @relation(fields: [userId], references: [id])
  userId      String

  slug        String?
  language  Language?

  watchedAt   DateTime @default(now())

  @@unique([articleId, userId])
  @@unique([slug, userId])
}

model SavedArticle {
  id        String   @id @default(cuid())

  article   Article? @relation(fields: [articleId], references: [id])
  articleId Int?

  user      User     @relation(fields: [userId], references: [id])
  userId    String

  slug      String?
  language  Language?

  savedAt   DateTime @default(now())

  @@unique([articleId, userId])
  @@unique([slug, userId])
}