generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =======================
// User + Auth Models
// =======================
model User {
  id              String            @id @default(cuid())
  name            String?
  email           String?           @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]

  revisions       Revision[]
  addedCategories ArticleCategory[] // categories this user added
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// =======================
// Core Wiki Models
// =======================

model Bias {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  revisions Revision[]
}

model Article {
  id         Int               @id @default(autoincrement())
  title      String            @unique
  slug       String            @unique
  revisions  Revision[]
  categories ArticleCategory[] // explicit join model with metadata
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
}

model Revision {
  id        Int      @id @default(autoincrement())
  article   Article  @relation(fields: [articleId], references: [id])
  articleId Int

  bias      Bias     @relation(fields: [biasId], references: [id])
  biasId    Int

  sections  Section[]
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?  // ✅ matches User.id (String)

  createdAt DateTime @default(now())
}

model Section {
  id         Int       @id @default(autoincrement())
  revision   Revision  @relation(fields: [revisionId], references: [id])
  revisionId Int
  title      String
  order      Int
  blocks     Block[]
}

model Block {
  id        Int      @id @default(autoincrement())
  section   Section  @relation(fields: [sectionId], references: [id])
  sectionId Int
  type      BlockType
  content   Json
  order     Int
}

enum BlockType {
  PARAGRAPH
  IMAGE
  LIST
  TABLE
  INFOBOX
  QUOTE
}

model Category {
  id        Int               @id @default(autoincrement())
  name      String            @unique
  articles  ArticleCategory[]
}

model ArticleCategory {
  article       Article @relation(fields: [articleId], references: [id])
  articleId     Int

  category      Category @relation(fields: [categoryId], references: [id])
  categoryId    Int

  addedBy       User     @relation(fields: [addedByUserId], references: [id])
  addedByUserId String   // ✅ matches User.id

  addedAt       DateTime @default(now())

  @@id([articleId, categoryId]) // composite primary key
}

