generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =======================
// User + Auth Models
// =======================
enum UserRole {
  USER
  ADMIN
}

enum SubscriptionTier {
  FREE
  PRO
}

model User {
  id              String            @id @default(cuid())
  name            String?
  email           String?           @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  role            UserRole          @default(USER)

  
  revisions       Revision[]
  addedCategories ArticleCategory[] // categories this user added
  watching        ArticleWatcher[]  // articles this user watches
  savedArticles   SavedArticle[] // articles this user saved
  moderatedBiases ModeratorBias[] // Biases this user moderates
  biasBans        BiasBan[]         // üö´ bans received
  issuedBans      BiasBan[]         @relation("BiasBanModerator") // üßë‚Äç‚öñÔ∏è bans given (mods)

  subscriptionTier      SubscriptionTier @default(FREE)
  subscriptionStartedAt DateTime?
  subscriptionExpiresAt DateTime?
  stripeCustomerId      String?

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model ModeratorBias {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  bias      Bias     @relation(fields: [biasId], references: [id])
  biasId    Int
  assignedAt DateTime @default(now())

  @@unique([userId, biasId]) // prevent duplicates
}

// TODO: Stripe integration for subscriptions
/*
model Subscription {
  id           String   @id @default(cuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  stripeSubId  String   @unique
  plan         SubscriptionTier
  status       String
  currentPeriodEnd DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
*/

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// =======================
// Core Wiki Models
// =======================
model Bias {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  revisions Revision[]
  bans      BiasBan[]
  moderators ModeratorBias[]
}

// TODO: Temporary bans?
// TODO: Warning strikes?
model BiasBan {
  id           Int       @id @default(autoincrement())
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  bias         Bias      @relation(fields: [biasId], references: [id])
  biasId       Int
  bannedBy     User?     @relation("BiasBanModerator", fields: [bannedByUserId], references: [id])
  bannedByUserId String?
  reason       String?
  createdAt    DateTime  @default(now())
  expiresAt    DateTime?

  @@unique([userId, biasId]) // prevent duplicate bans per bias
}

model Article {
  id         Int               @id @default(autoincrement())
  title      String            @unique
  slug       String            @unique
  revisions  Revision[]
  categories ArticleCategory[] // explicit join model with metadata
  watchers    ArticleWatcher[]   // who‚Äôs watching this article
  savedBy     SavedArticle[] // who's saved this article
  language   Language
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
}

model Revision {
  id        Int      @id @default(autoincrement())
  article   Article  @relation(fields: [articleId], references: [id])
  articleId Int

  bias      Bias     @relation(fields: [biasId], references: [id])
  biasId    Int

  sections  Section[]
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?  // ‚úÖ matches User.id (String)

  createdAt DateTime @default(now())
}

model Section {
  id         Int       @id @default(autoincrement())
  revision   Revision  @relation(fields: [revisionId], references: [id])
  revisionId Int
  title      String
  order      Int
  blocks     Block[]
}

model Block {
  id        Int      @id @default(autoincrement())
  section   Section  @relation(fields: [sectionId], references: [id])
  sectionId Int
  type      BlockType
  content   Json
  order     Int
}

enum BlockType {
  PARAGRAPH
  IMAGE
  LIST
  TABLE
  INFOBOX
  QUOTE
}

enum Language {
  ENGLISH
  CHINESE
  HINDI
  SPANISH
  FRENCH
  ARABIC
  BENGALI
  PORTUGUESE
  RUSSIAN
  URDU
  INDONESIAN
  MARATHI
  GERMAN
  JAPANESE
  TELUGU
  TURKISH
  SRI_LANKAN_TAMIL
  CANTONESE
  VIETNAMESE
  FILIPINO
  KOREAN
  HAUSA
  EGYPTIAN_ARABIC
  JAVANESE
  ITALIAN
  DUTCH
  GREEK
  SWEDISH
  NORWEGIAN
  POLISH
  THAI
  UKRANIAN
  ROMANIAN
  CZECH
  HUNGARIAN
  FINNISH
  DANISH
  BULGARIAN
  SLOVAK
  CROATIAN
  LITHUANIAN
  SLOVENIAN
  LATVIAN
  ESTONIAN
  ICELANDIC
  ALBANIAN
  SERBIAN
  MACEDONIAN
  BOSNIAN
  MONTENEGRIN
  MALTESE
}

model Category {
  id        Int               @id @default(autoincrement())
  name      String            @unique
  articles  ArticleCategory[]
}

model ArticleCategory {
  article       Article @relation(fields: [articleId], references: [id])
  articleId     Int

  category      Category @relation(fields: [categoryId], references: [id])
  categoryId    Int

  addedBy       User     @relation(fields: [addedByUserId], references: [id])
  addedByUserId String   // ‚úÖ matches User.id

  addedAt       DateTime @default(now())

  @@id([articleId, categoryId]) // composite primary key
}

// ===================
// WATCHERS & SAVERS
// ===================

model ArticleWatcher {
  article     Article @relation(fields: [articleId], references: [id])
  articleId   Int
  user        User    @relation(fields: [userId], references: [id])
  userId      String
  watchedAt   DateTime @default(now())

  @@id([articleId, userId])
}

model SavedArticle {
  article     Article @relation(fields: [articleId], references: [id])
  articleId   Int
  user        User    @relation(fields: [userId], references: [id])
  userId      String
  savedAt     DateTime @default(now())

  @@id([articleId, userId])
}